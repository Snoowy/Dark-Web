---
import Main from "../layouts/MainLayout.astro";
import I18nKeys from "../locales/keys";
import { i18n } from "../locales/translation";
interface Props {
  title?: string;
  subTitle?: string;
  bannerImage?: string;
  published?: Date;
}
const { bannerImage } = Astro.props;
---

<Main title={i18n(I18nKeys.double_register)} subTitle="" bannerImage={bannerImage}>
  <div class="min-h-screen flex items-center justify-center bg-black-100">
    <!-- Actualiza el endpoint a /api/register -->
    <form 
      id="registerForm" 
      action="/api/register" 
      method="POST" 
      class="bg-white p-8 rounded-lg shadow-lg animate-fadeIn w-full max-w-lg"
    >
      <h2 class="text-2xl font-bold mb-6 text-center">{i18n(I18nKeys.register_reg)}</h2>
      
      <div class="mb-4">
        <label for="user" class="block text-gray-700 font-bold mb-2">{i18n(I18nKeys.register_user)}</label>
        <input 
          type="text" 
          id="user" 
          name="user" 
          required 
          placeholder={i18n(I18nKeys.register_iuser)}
          class="w-full px-3 py-2 border rounded bg-black text-white focus:outline-none focus:border-blue-500 transition duration-300" 
        />
      </div>
      
      <div class="mb-4">
        <label for="email" class="block text-gray-700 font-bold mb-2">{i18n(I18nKeys.register_email)}</label>
        <input 
          type="email" 
          id="email" 
          name="email" 
          required 
          placeholder="my@mail.com"
          class="w-full px-3 py-2 border rounded bg-black text-white focus:outline-none focus:border-blue-500 transition duration-300" 
        />
      </div>
      
      <div class="mb-4">
        <label for="password" class="block text-gray-700 font-bold mb-2">{i18n(I18nKeys.register_pass)}</label>
        <input 
          type="password" 
          id="password" 
          name="password" 
          required 
          placeholder={i18n(I18nKeys.register_ipw)}
          class="w-full px-3 py-2 border rounded bg-black text-white focus:outline-none focus:border-blue-500 transition duration-300" 
        />
      </div>
      
      <div class="mb-4">
        <label for="confirmPassword" class="block text-gray-700 font-bold mb-2">{i18n(I18nKeys.register_rpass)}</label>
        <input 
          type="password" 
          id="confirmPassword" 
          name="confirmPassword" 
          required 
          placeholder={i18n(I18nKeys.register_rpass)}
          class="w-full px-3 py-2 border rounded bg-black text-white focus:outline-none focus:border-blue-500 transition duration-300" 
        />
      </div>

  <!-- Botón de aceptar términos y condiciones -->
      <div class="mb-4">
       <label class="flex items-center">
       <input 
          type="checkbox" 
          name="terms" 
          required 
          class="mr-2"
        />
        {i18n(I18nKeys.register_acepterms)} 
          <a 
          href="/terminos" 
          target="_blank" 
          class="text-blue-500 underline ml-1"
        >
        {i18n(I18nKeys.register_terms)}
          </a>
        </label>
      </div>
      
      <div class="flex items-center justify-center">
        <button 
          type="submit"
          class="bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-600 transition duration-300"
        >
        {i18n(I18nKeys.register_reg)}
        </button>
      </div>
    </form>
  </div>
</Main>

<!-- Script para manejar la respuesta sin recargar la página -->
<script>
  const registerForm = document.getElementById('registerForm') as HTMLFormElement;

  if (registerForm) {
    registerForm.addEventListener('submit', async (e) => {
      e.preventDefault(); // Evita la recarga de la página
      const formData = new FormData(registerForm);
      
      try {
        const response = await fetch('/api/register', {  // Actualizado a /api/register
          method: 'POST',
          body: formData
        });

        // Verifica el header de contenido
        const contentType = response.headers.get('content-type');
        if (contentType && contentType.indexOf('application/json') !== -1) {
          const result = await response.json();
          console.log(result);
          
          if(result.error) {
            alert(`Error: ${result.error_msg}`);
          } else {
            alert(`Éxito: ${result.message}`);
            // Opcional: redirige a otra página, por ejemplo:
            // window.location.href = '/login';
          }
        } else {
          const text = await response.text();
          console.error('El endpoint no retornó JSON:', text);
          alert('El servidor no retornó un JSON válido.');
        }
      } catch (error) {
        console.error('Error en la petición:', error);
        alert('Hubo un error en la solicitud.');
      }
    });
  } else {
    console.error("No se encontró el formulario de registro.");
  }
</script>
